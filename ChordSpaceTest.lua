require("ChordSpace")

print("CHORDSPACE UNIT TESTS")
print()

function test(chunk, ...)
    local result = assert(loadstring(chunk))()
    print(chunk)
    if result then 
        print('asserted:', result)
    end
end

function result(...)
    local args = {...}
    for i = 1, #args, 2 do
        print(string.format('\t%s:', args[i]), args[i + 1])
    end
end

test('a = Chord:new()')
result('a', a)
test('a:resize(3)')
result('a', a)
test('a[1] = 2')
result('a', a)
test('b = Chord:new()')
result('b', b)
test('b:resize(3)')
result('b', b)
test('equals = (a == b)')
result('a', a, 'b', b, 'equals', equals)
test('b[1] = 2', b)
test('equals = (a == b)')
result('a', a, 'b', b, 'equals', equals)
test('c = Chord:new{3, 2, 1}')
result('c', c)
test('c:sort()')
result('c', c)
test('lt = (a < c)')
result('a', a, 'c', c, 'lt', lt)
test('lt = (c < a)')
result('a', a, 'c', c, 'lt', lt)
test('m = a:min()')
result('a', a, 'm', m)
test('m = a:max()')
result('a', a, 'm', m)
test('d = c:copy()')
result('c', c, 'd', d)
test('n = c:count(2)')
result('c', c, 'n', n)
test('n = a:count(0)')
result('a', a, 'n', n)
test('n = c:sum()')
result('c', c, 'n', n)
test('n = a:sum()')
result('a', a, 'n', n)
test('s = a:sort()')
result('a', a, 's', s)
test('o = Orbifold:new()')
result('o', o, 'o.N', o.N)
test('v = o:voiceleading(c, a)')
result('c', c, 'a', a, 'v', v)
test('c = Chord:new(); c:resize(6); d = o:copyChord(c);')
result('c', c, 'd', d)
test('e = Orbifold:T(b, 3)')
result('b', b, 'e', e)
test('c = Chord:new{19, 13, 14}; pcs = pitchclasses(c);')
result('c', c, 'pcs', pcs)
test('c = Chord:new{0, 4, 7}; d = o:I(c, 6);')
result('c', c, 'd', d)
test('c = Chord:new{24, 7, 16}; t = o:tones(c)')
result('c', c, 't', t)
test('c = Chord:new{0, 4, 7}; d = o:rotate(c, 1);')
result('c', c, 'd', d)
test('c = Chord:new{0, 4, 7}; d = o:rotate(c, -1);')
result('c', c, 'd', d)
test('c = Chord:new{0, 4, 7}; d = o:invert(c);')
result('c', c, 'd', d)
test('c = Chord:new{0, 16, 7}; d = o:inversions(c);')
result('c', c, 'd', d)
for i, inversion in ipairs(d) do
    print(i, inversion)
end
test('s = o:smoothness(c, b)')
result('c', c, 'b', b, 's', s)
test('s = o:smoothness(c, c)')
result('c', c, 'c', c, 's', s)
test('a = Chord:new{5, 5, 5}; b = Chord:new{19, 19, 19}; p = o:areParallel(a, b)')
result('a', a, 'b', b, 'p', p)
test('a = Chord:new{5, 5, 5}; b = Chord:new{12, 12, 12}; p = o:areParallel(a, b)')
result('a', a, 'b', b, 'p', p)
test('s = o:smoother(a, b, c, false)')
result('s', s, 'a', a, 'c', c, 'b', b)
test('s = o:smoother(a, b, c, true)')
result('s', s, 'a', a, 'c', c, 'b', b)
test('s = o:simpler(a, b, c, false)')
result('s', s, 'a', a, 'c', c, 'b', b)
test('s = o:simpler(a, b, c, true)')
result('s', s, 'a', a, 'c', c, 'b', b)
test('z = o:zeroForm(a)')
result('a', a, 'z', z)
test('z = o:zeroForm(c)')
result('c', c, 'z', z)
test('d = Chord:new{5, 8, 1}; z = o:zeroForm(d)')
result('d', d, 'z', z)
test('z = o:firstInversion(d)')
result('d', d, 'z', z)
test('z = o:zeroFormFirstInversion(d)')
result('d', d, 'z', z)










